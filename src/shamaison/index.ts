import "dotenv/config";
import { Building, Station } from "./types";
import { ApplicationResult } from "../common/types";
import { sendLineMessage } from "../messagingApi";
import { getLatestFile } from "../github";
import { getDateFromFileName } from "../utils";

const searchableStations: Station[] = [
  { name: "Êµ¶ÂíåÈßÖ", url: "/saitama/route/J002093/station/21982" },
];

export const sendShamaisonMessage = async () => {
  // get station from searchableStations
  const getStation = () => {
    const stationName = process.env.SHAMAISON_STATION as string;
    let station: Station | undefined = undefined;
    for (const _station of searchableStations) {
      if (stationName === _station.name) {
        station = _station;
      }
    }
    return station;
  };

  const createMessage = (
    date: Date,
    station: Station,
    buildings: Building[]
  ) => {
    // e.g: üéâ2022Âπ¥01Êúà01Êó• Êñ∞ÂÆøÈßÖ„ÅÆÁâ©‰ª∂ÊÉÖÂ†±üéâ
    const title = `üéâ${date.getFullYear()}Âπ¥${
      date.getMonth() + 1
    }Êúà${date.getDate()}Êó• ${station.name}„ÅÆÁâ©‰ª∂ÊÉÖÂ†±üéâ\n`;

    // e.g: „Äê„Ç∑„É£„Éº„É°„Çæ„É≥„ÄëJRÂ±±ÊâãÁ∑ö Êñ∞ÂÆøÈßÖ ÂæíÊ≠©10ÂàÜ https://www.shamaison.com/tokyo/area/00000/00000000/
    const buildingInfo =
      buildings.length === 0
        ? "ÂØæË±°Âú∞Âüü„ÅÆÁâ©‰ª∂ÊÉÖÂ†±„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì\n"
        : buildings
            .map((e) => {
              return `„Äê${e.name}„Äë\n${e.access}\n${e.url}\n`;
            })
            .join("\n");

    // e.g: ‚≠ê„Ç´„É´„Éá„Ç£ÂÖ¨Âºè„Çµ„Ç§„Éà‚≠êhttps://www.shamaison.com/tokyo/route/0000000/station/00000
    const officialLink = `‚≠ê„Ç∑„É£„Éº„É°„Çæ„É≥ÂÖ¨Âºè„Çµ„Ç§„Éà‚≠ê\nhttps://www.shamaison.com${station.url}`;

    return `${title}\n${buildingInfo}\n${officialLink}`;
  };

  try {
    const latestFile = await getLatestFile("SHAMAISON");
    if (!latestFile) throw new Error("can't get latest file");
    const date = getDateFromFileName(latestFile.name);
    const buildings: Building[] = JSON.parse(latestFile.data);
    const station = getStation();
    if (!station) throw new Error("can't get station");
    const message = createMessage(date, station, buildings);
    const result = await sendLineMessage("SHAMAISON", message);
    return result;
  } catch (e) {
    console.log("kaldi.sendKaldiMessage is failed");
    return "FAILED" as ApplicationResult;
  }
};
